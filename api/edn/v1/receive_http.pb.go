// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.19.4
// source: edn/v1/receive.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationReceiverRecrive = "/edn.v1.Receiver/Recrive"

type ReceiverHTTPServer interface {
	Recrive(context.Context, *ReceiveRequest) (*ReceiveReply, error)
}

func RegisterReceiverHTTPServer(s *http.Server, srv ReceiverHTTPServer) {
	r := s.Route("/")
	r.GET("/channel/{channel}", _Receiver_Recrive0_HTTP_Handler(srv))
}

func _Receiver_Recrive0_HTTP_Handler(srv ReceiverHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReceiveRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceiverRecrive)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Recrive(ctx, req.(*ReceiveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReceiveReply)
		return ctx.Result(200, reply)
	}
}

type ReceiverHTTPClient interface {
	Recrive(ctx context.Context, req *ReceiveRequest, opts ...http.CallOption) (rsp *ReceiveReply, err error)
}

type ReceiverHTTPClientImpl struct {
	cc *http.Client
}

func NewReceiverHTTPClient(client *http.Client) ReceiverHTTPClient {
	return &ReceiverHTTPClientImpl{client}
}

func (c *ReceiverHTTPClientImpl) Recrive(ctx context.Context, in *ReceiveRequest, opts ...http.CallOption) (*ReceiveReply, error) {
	var out ReceiveReply
	pattern := "/channel/{channel}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationReceiverRecrive))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
